package com.maveric.streamchange;

import java.io.File;
import java.io.FileInputStream;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.testng.Assert;
import org.testng.collections.CollectionUtils;





public class ReadDataFromExcel {
	public Map<String,Map<String,String>> userStramValues = new LinkedHashMap<String,Map<String,String>>();
	public  Map<String,String> userStreamOutputFlagsIndividual;
	public  Map<String,String> userStreamSelectedIndividual;
	public  Map<String,Map<String,String>> userStreamSelectedAll=new LinkedHashMap<String,Map<String,String>>();
	public Map<String,Map<String,String>> userStreamOutputValuesAll=new LinkedHashMap<String,Map<String,String>>();
	
	public void updateExcelValuesInMap(Map<String,Map<String,String>> inputMap) throws IOException
	{
		Map<String,String> tempMap;
		
		FileInputStream input=new FileInputStream("C:\\Users\\1601017\\Desktop\\Stream Change\\input.xlsx");
		XSSFWorkbook workbook=new XSSFWorkbook(input);
		XSSFSheet sheet=workbook.getSheet("Sheet1");
		String employeeId = "";
		XSSFRow row1,row2;
		row1=sheet.getRow(0);
		
		int rowCount=sheet.getLastRowNum();
		int colcount=row1.getLastCellNum();
		
		for(int row=1;row<=rowCount;row++)
		{
			tempMap=new LinkedHashMap<String,String>();
			row2=sheet.getRow(row);
			for(int col=0;col<colcount;col++)
			{
				
				String key=row1.getCell(col).toString().trim();
				String value=row2.getCell(col).toString().trim();
				employeeId=row2.getCell(5).toString().trim();
				tempMap.put(key, value);
				
			}
			
			inputMap.put(employeeId, tempMap);			
			
		}									
		
	}
	
	
	public String getValuefromMap(Map<String,String> mapname,String key)
	{
		String value="";
		try
		{
			value=mapname.get(key);
			return value;
		}
		catch (NullPointerException e) 
		{
			System.out.println(key+ " -value not available in map, please check config file"+e);
			Assert.fail(key+ " -value not available in map, please check config file"+e);
		}
		catch(Exception e)
		{
			System.out.println(key+ " -value not available in map, please check config file"+e);
			Assert.fail(key+ " -value not available in map, please check config file"+e);
	
		}
		
		return value;
	}

	
	
	
	
	
	public List<String> splitValue(String value)
	{
		List<String> arrayList=new ArrayList<String>();
		String[] spliedArray=value.split(";");
		arrayList.addAll(Arrays.asList(spliedArray));
		arrayList.replaceAll(String::trim);
		return arrayList;
		
		
	}
	
	
	public String flagChecker(String selectedAns,String advancedValue,String intermediateValue,String basicValue,int expectedAdvancedSize,int expectedIntermediateSize,int expectedBasicSize )
	{
		
		
		List<String> advancedArray=new ArrayList<String>();
		List<String> intermediateArray=new ArrayList<String>();
		List<String> basicArray=new ArrayList<String>();
		List<String> selectedValuesArray=new ArrayList<String>();
		
		advancedArray=splitValue(advancedValue);
		intermediateArray=splitValue(intermediateValue);
		basicArray=splitValue(basicValue);
		selectedValuesArray=splitValue(selectedAns);
		
		basicArray.retainAll(selectedValuesArray);
		intermediateArray.retainAll(selectedValuesArray);
		advancedArray.retainAll(selectedValuesArray);
			
		
		if((selectedValuesArray.size()==1) && selectedValuesArray.get(0).equals("NA"))
		{
			return "Not Applicable";
		}
		
		else if(advancedArray.size()==expectedAdvancedSize)
		{
			System.out.println("Advanced");
			return "Advanced";
		}
		
		else if (intermediateArray.size()==expectedIntermediateSize)
		{				
			
			if(intermediateArray.size()==0)
			{
				return "Not Applicable";
			}
			
			return "Intermediate";
			
		}
	else if(basicArray.size()==expectedBasicSize)
	{
		return "Basic";
	}
	else
	{
		return "Not Applicable";
	}
	}
	
	public String replaceTwosemicolons(String inputString)
	{
		String output=inputString.replaceAll(";;", ";");
		return output;
	}
	
	public void verifyFlags(Map<String,String> values) throws Exception
	{
		userStreamOutputFlagsIndividual=new LinkedHashMap<String,String>();
		userStreamSelectedIndividual=new LinkedHashMap<String,String>();
		userStreamOutputFlagsIndividual.put("Name",values.get("Name"));
		userStreamOutputFlagsIndividual.put("Email",values.get("Email"));
		userStreamOutputFlagsIndividual.put("Employee ID",values.get("Employee ID"));
		userStreamOutputFlagsIndividual.put("CURRENT DESIGNATION - PROPOSED DESIGNATION",values.get("CURRENT DESIGNATION - PROPOSED DESIGNATION"));
		userStreamSelectedIndividual.put("Name", values.get("Name"));
		userStreamSelectedIndividual.put("Email",values.get("Email"));
		userStreamSelectedIndividual.put("Employee ID",values.get("Employee ID"));
		userStreamSelectedIndividual.put("CURRENT DESIGNATION - PROPOSED DESIGNATION",values.get("CURRENT DESIGNATION - PROPOSED DESIGNATION"));
		
		/*TEST CASE DESIGN*/
		String testCaseDesignTopic=getValuefromMap(values, "Test Case Design");
		testCaseDesignTopic=replaceTwosemicolons(testCaseDesignTopic);
		flagAssessment("Test Case Design", testCaseDesignTopic);
		userStreamSelectedIndividual.put("Test Case Design", testCaseDesignTopic);	
		
		/*TEST EXECUTION*/
		String testExecutionTopic=getValuefromMap(values, "End to End Testing")+";"+getValuefromMap(values, "Exploratory Testing")+";"+getValuefromMap(values, "Compliance")+";"+getValuefromMap(values, "Test Execution");
		testExecutionTopic=replaceTwosemicolons(testExecutionTopic);
		flagAssessment("Test Execution", testExecutionTopic);
		userStreamSelectedIndividual.put("Test Execution", testExecutionTopic);
		
		/*STLC Tools*/
		String stlcToolsTopic=getValuefromMap(values, "STLC Tools");
		stlcToolsTopic=replaceTwosemicolons(stlcToolsTopic);
		flagAssessment("STLC Tools", stlcToolsTopic);
		userStreamSelectedIndividual.put("STLC Tools", stlcToolsTopic);
		
		/*Test Automation Design*/
		String testAutomationDesignTopic=getValuefromMap(values, "Automation Development")+";"+getValuefromMap(values, "Test Automation Design");
		testAutomationDesignTopic=replaceTwosemicolons(testAutomationDesignTopic);
		flagAssessment("Test Automation Design", testAutomationDesignTopic);
		userStreamSelectedIndividual.put("Test Automation Design", testAutomationDesignTopic);
		
		/*Test Automation Execution*/
		String testAutomationExecutionTopic=getValuefromMap(values, "Test Automation Execution")+";"+getValuefromMap(values, "Automation Execution")+";"+getValuefromMap(values, "Sustenance/Maintainence");
		testAutomationExecutionTopic=replaceTwosemicolons(testAutomationExecutionTopic);
		flagAssessment("Test Automation Execution", testAutomationExecutionTopic);
		userStreamSelectedIndividual.put("Test Automation Execution", testAutomationExecutionTopic);
		
		/*Domain/Product Knowledge*/
		String domainKnowledgeTopic=getValuefromMap(values, "Backlog Prioritization")+";"+getValuefromMap(values, "Domain/Product Knowledge");
		domainKnowledgeTopic=replaceTwosemicolons(domainKnowledgeTopic);
		flagAssessment("Domain/Product Knowledge", domainKnowledgeTopic);
		userStreamSelectedIndividual.put("Domain/Product Knowledge", domainKnowledgeTopic);
		
		/*Defect Logging and Reporting*/
		String defectLoggingAndReportingTopic=getValuefromMap(values, "Defect Logging and Reporting")+";"+getValuefromMap(values, "Defect Management");
		defectLoggingAndReportingTopic=replaceTwosemicolons(defectLoggingAndReportingTopic);
		flagAssessment("Defect Logging and Reporting", defectLoggingAndReportingTopic);
		userStreamSelectedIndividual.put("Defect Logging and Reporting", defectLoggingAndReportingTopic);
		
		/*Specialized Testing  [ API, Performance Testing, Mobile Testing ]*/
		String specializedTestingTopic=getValuefromMap(values, "Specialized Testing  [ API, Performance Testing, Mobile Testing ]");
		specializedTestingTopic=replaceTwosemicolons(specializedTestingTopic);
		flagAssessment("Specialized Testing  [ API, Performance Testing, Mobile Testing ]", specializedTestingTopic);
		userStreamSelectedIndividual.put("Specialized Testing  [ API, Performance Testing, Mobile Testing ]", specializedTestingTopic);
		
		
		/*Defect Management*/
		String defectManagementTopic=getValuefromMap(values, "Defect Management");
		defectManagementTopic=replaceTwosemicolons(defectManagementTopic);
		flagAssessment("Defect Management", defectManagementTopic);
		userStreamSelectedIndividual.put("Defect Management", defectManagementTopic);
		
		/*Team Management*/
		String teamManagementTopic=getValuefromMap(values, "Collaboration")+";"+getValuefromMap(values, "Stake holder Engagement")+";"+getValuefromMap(values, "Vision & Goals")+";"+getValuefromMap(values, "Team Management");
		teamManagementTopic=replaceTwosemicolons(teamManagementTopic);
		flagAssessment("Team Management", teamManagementTopic);
		userStreamSelectedIndividual.put("Team Management", teamManagementTopic);
		
		/*Test Management*/
		String testManagementTopic=getValuefromMap(values, "Test Management");
		testManagementTopic=replaceTwosemicolons(testManagementTopic);
		flagAssessment("Test Management", testManagementTopic);
		userStreamSelectedIndividual.put("Test Management", testManagementTopic);
		
		/*Project and Delivery Management*/
		String projectAndDeliveryManagementTopic=getValuefromMap(values, "Project and Delivery Management")+";"+getValuefromMap(values, "Progress monitoring")+";"+getValuefromMap(values, "Governance");
		projectAndDeliveryManagementTopic=replaceTwosemicolons(projectAndDeliveryManagementTopic);
		flagAssessment("Project and Delivery Management",projectAndDeliveryManagementTopic);
		userStreamSelectedIndividual.put("Project and Delivery Management",projectAndDeliveryManagementTopic);
		
		
		/*Test Strategy and Planning*/
		String testStrategyAndPlanningTopic=getValuefromMap(values, "Planning")+";"+getValuefromMap(values, "Test Strategy and Planning");
		testStrategyAndPlanningTopic=replaceTwosemicolons(testStrategyAndPlanningTopic);
		flagAssessment("Test Strategy and Planning",testStrategyAndPlanningTopic);
		userStreamSelectedIndividual.put("Test Strategy and Planning",testStrategyAndPlanningTopic);
		
		/*Test Solutions (Pre Sales)*/
		String testSolutionsTopic=getValuefromMap(values, "Test Solutions (Pre Sales)")+";"+getValuefromMap(values, "Estimation");
		testSolutionsTopic=replaceTwosemicolons(testSolutionsTopic);
		flagAssessment("Test Solutions (Pre Sales)",testSolutionsTopic);
		userStreamSelectedIndividual.put("Test Solutions (Pre Sales)",testSolutionsTopic);
		
		/*Program Management*/
		String programManagementTopic=getValuefromMap(values, "Processes modeling and Change Management Planning")+";"+getValuefromMap(values, "Project Management");
		programManagementTopic=replaceTwosemicolons(programManagementTopic);
		flagAssessment("Program Management", programManagementTopic);
		userStreamSelectedIndividual.put("Program Management", programManagementTopic);
		
		/*OO Programming*/
		String oOProgrammingTopic=getValuefromMap(values, "OO Programming")+";"+getValuefromMap(values, "Test scripting")+";"+getValuefromMap(values, "Application Coding");
		oOProgrammingTopic=replaceTwosemicolons(oOProgrammingTopic);
		flagAssessment("OO Programming", oOProgrammingTopic);
		userStreamSelectedIndividual.put("OO Programming", oOProgrammingTopic);
		
		/*Software Design*/
		String softwareDesignTopic=getValuefromMap(values, "Application Design")+";"+getValuefromMap(values, "Software Design");
		softwareDesignTopic=replaceTwosemicolons(softwareDesignTopic);
		flagAssessment("Software Design", softwareDesignTopic);
		userStreamSelectedIndividual.put("Software Design", softwareDesignTopic);
		
		/*Knowledge of Multiple Tools (Build tools, Test frameworks)*/
		String knowledgeofMultipleToolsTopic=getValuefromMap(values, "Test Architect")+";"+getValuefromMap(values, "Knowledge of Multiple Tools (Build tools, Test frameworks)");
		knowledgeofMultipleToolsTopic=replaceTwosemicolons(knowledgeofMultipleToolsTopic);
		flagAssessment("Knowledge of Multiple Tools (Build tools, Test frameworks)", knowledgeofMultipleToolsTopic);
		userStreamSelectedIndividual.put("Knowledge of Multiple Tools (Build tools, Test frameworks)", knowledgeofMultipleToolsTopic);
		
		/*Solution Development*/
		String solutionDevelopmentTopic=getValuefromMap(values, "Test Automation Specialist")+";"+getValuefromMap(values, "Solution Development");
		solutionDevelopmentTopic=replaceTwosemicolons(solutionDevelopmentTopic);
		flagAssessment("Solution Development", solutionDevelopmentTopic);
		userStreamSelectedIndividual.put("Solution Development", solutionDevelopmentTopic);
		
		
		/*Test Data Management and Database Skills*/
		String testDataManagementandDatabaseSkillsTopics=getValuefromMap(values, "Database Test Engineer")+";"+getValuefromMap(values, "Test Data Management and Database Skills");
		testDataManagementandDatabaseSkillsTopics=replaceTwosemicolons(testDataManagementandDatabaseSkillsTopics);
		flagAssessment("Test Data Management and Database Skills", testDataManagementandDatabaseSkillsTopics);
		userStreamSelectedIndividual.put("Test Data Management and Database Skills", testDataManagementandDatabaseSkillsTopics);
		
		/*Levels of Automation*/
		String levelsofAutomationTopic=getValuefromMap(values, "Levels of Automation");
		levelsofAutomationTopic=replaceTwosemicolons(levelsofAutomationTopic);
		flagAssessment("Levels of Automation", levelsofAutomationTopic);
		userStreamSelectedIndividual.put("Levels of Automation", levelsofAutomationTopic);
		
		
		/*Reporting Skills*/
		String reportingSkillsTopic=getValuefromMap(values, "Reporting Analyst")+";"+getValuefromMap(values, "Reporting Skills");
		reportingSkillsTopic=replaceTwosemicolons(reportingSkillsTopic);
		flagAssessment("Reporting Skills", reportingSkillsTopic);
		userStreamSelectedIndividual.put("Reporting Skills", reportingSkillsTopic);
		
		/*Service Engineering*/
		String serviceEngineeringTopic=getValuefromMap(values, "API Engineering")+";"+getValuefromMap(values, "Service Engineering");
		serviceEngineeringTopic=replaceTwosemicolons(serviceEngineeringTopic);
		flagAssessment("Service Engineering", serviceEngineeringTopic);
		userStreamSelectedIndividual.put("Service Engineering", serviceEngineeringTopic);
		
		/*Performance Engineering*/
		String performanceEngineeringTopic=getValuefromMap(values, "Performance Testing")+";"+getValuefromMap(values, "Performance Engineering");
		performanceEngineeringTopic=replaceTwosemicolons(performanceEngineeringTopic);
		flagAssessment("Performance Engineering", performanceEngineeringTopic);
		userStreamSelectedIndividual.put("Performance Engineering", performanceEngineeringTopic);
		
		/*Data Science and Testing Predictions*/
		String dataScienceAndTestingPredictionsTopic=getValuefromMap(values, "Data Scientist")+";"+getValuefromMap(values, "Data Visualization")+";"+getValuefromMap(values, "Data Science and Testing Predictions");
		dataScienceAndTestingPredictionsTopic=replaceTwosemicolons(dataScienceAndTestingPredictionsTopic);
		flagAssessment("Data Science and Testing Predictions", dataScienceAndTestingPredictionsTopic);
		userStreamSelectedIndividual.put("Data Science and Testing Predictions", dataScienceAndTestingPredictionsTopic);
		
		/*Business Process Knowledge (Client specific/Product Specific)*/
		String businessProcessKnowledgeTopic=getValuefromMap(values, "Process Owner");
		businessProcessKnowledgeTopic=replaceTwosemicolons(businessProcessKnowledgeTopic);
		flagAssessment("Business Process Knowledge (Client specific/Product Specific)", businessProcessKnowledgeTopic);
		userStreamSelectedIndividual.put("Business Process Knowledge (Client specific/Product Specific)", businessProcessKnowledgeTopic);
		
		/*Conceptual View of Domain*/
		String conceptualViewofDomainTopic=getValuefromMap(values, "Functional / Domain Consultant")+";"+getValuefromMap(values, "Conceptual View of Domain");
		conceptualViewofDomainTopic=replaceTwosemicolons(conceptualViewofDomainTopic);
		flagAssessment("Conceptual View of Domain", conceptualViewofDomainTopic);
		userStreamSelectedIndividual.put("Conceptual View of Domain", conceptualViewofDomainTopic);
		
		/*Requirement Analysis and Influencing SCRUM*/
		String requirementAnalysisandInfluencingCRUMTopic=getValuefromMap(values, "Requirement Analysis and Influencing SCRUM")+";"+getValuefromMap(values, "Business Analyst");
		requirementAnalysisandInfluencingCRUMTopic=replaceTwosemicolons(requirementAnalysisandInfluencingCRUMTopic);
		flagAssessment("Requirement Analysis and Influencing SCRUM", requirementAnalysisandInfluencingCRUMTopic);
		userStreamSelectedIndividual.put("Requirement Analysis and Influencing SCRUM", requirementAnalysisandInfluencingCRUMTopic);
		
		/*Model Based Test Design*/
		String modelBasedTestDesignTopic=getValuefromMap(values, "Model Based Test Design");
		modelBasedTestDesignTopic=replaceTwosemicolons(modelBasedTestDesignTopic);
		flagAssessment("Model Based Test Design", modelBasedTestDesignTopic);
		userStreamSelectedIndividual.put("Model Based Test Design", modelBasedTestDesignTopic);
		
		
		 
		
	
	}
	
	

	
	
	public void flagAssessment(String topic,String selectedAnswers)
	{
			
		switch (topic) {
		case "Test Case Design":
			String testcaseDesignAdvanced="Design quality test cases with help from the available specification, user documentation, interviews/discussions, functional flows & operational flows;Demonstrated competency in reviewing test cases of peers and ensuring consistency and quality of test cases;Demonstrated proficiency in establishing test coverage and traceability;Competent to tag and mark test cases for various suites and plan for test data and run scheduling for test cases;Proficiency in subsetting test cases based on regression and impact";
			String testcaseDesignintermediate="Design quality test cases with help from the available specification, user documentation, interviews/discussions, functional flows & operational flows;Demonstrated competency in reviewing test cases of peers and ensuring consistency and quality of test cases;Demonstrated proficiency in establishing test coverage and traceability";
			String testcaseDesignBasic="Design quality test cases with help from the available specification, user documentation, interviews/discussions, functional flows & operational flows";
			String testcaseDesignFlag=flagChecker(selectedAnswers,testcaseDesignAdvanced, testcaseDesignintermediate,testcaseDesignBasic, 5, 3, 1);
			userStreamOutputFlagsIndividual.put(topic, testcaseDesignFlag);
			System.out.println("Topic - "+topic+"  Selected Ans - "+selectedAnswers+" Category - "+testcaseDesignFlag);	
			break;
			
		case "Test Execution":
			String testExecutionAdvanced="Ability to manage complex execution of test cases based on dependencies and liaise with automation/developers/BA etc. to expedite test case execution;Perform extensive exploratory Adhoc/random testing based on experience, help peers and also implement execution optimizations;Is compliant with test evidence documentation requirements for self & audit evidences for peers or other team members and provide root cause analysis;Demonstrated ability to drive process improvements in test case execution by spotting and improving bottleneck activities";
			String testExecutionintermediate="Execute end to end testing of the complete work flow;Perform extensive exploratory Adhoc/random testing based on experience and also help peers;Is compliant with test evidence documentation requirements for self & audit evidences for peers or other team members";
			String testExecutionBasic="Execute testing based on Test Case specification;Perform limited testing based on experience;Is compliant with test evidence documentation requirements";
			String testExecutionFlag=flagChecker(selectedAnswers,testExecutionAdvanced, testExecutionintermediate,testExecutionBasic, 4, 3, 3);
			userStreamOutputFlagsIndividual.put(topic, testExecutionFlag);
			System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+testExecutionFlag);	
			break;
		
		case "STLC Tools":
			String STLCToolsAdvanced="Knowledge of tools;Shares and publishes short notes on various tools across test life cycle;Uses tools for various activities such as test case writing, test execution, test management, reporting;Knowledge of the limitation of test execution and test management tools;Competent in identifying improvements to the tool based on the analysis of the limitations;Demonstrated proficiency in bringing tool adoption into the program along with process improvements;Competent in independently scripting/adapting tool for current environment";
			String STLCToolsintermediate="Knowledge of tools;Shares and publishes short notes on various tools across test life cycle;Uses tools for various activities such as test case writing, test execution, test management, reporting;Knowledge of the limitation of test execution and test management tools";
			String STLCToolsBasic="Knowledge of tools;Uses tools for various activities such as test case writing, test execution, test management, reporting";
			String STLCToolsFlag=flagChecker(selectedAnswers,STLCToolsAdvanced, STLCToolsintermediate,STLCToolsBasic, 7, 4, 2);
			userStreamOutputFlagsIndividual.put(topic, STLCToolsFlag);
			System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+STLCToolsFlag);	
			break;
	 
		case "Test Automation Design":
			String testAutomationDesignAdvanced="Ability to design a new automation framework and / or significantly upgrade an existing framework;Ability to adopt TDD, BDD, methods and integrate data, manual + automated testing in test case design;Ability to package test automation suites for execution;Ability to apply best practices such as audit trail, data independence, multithreading and reporting;Ability to create hands-free test execution methods that can be handed over for execution and maintenance to manual or entry level automation Test Engineers;Uses industry standard design standards to bring in overall productivity improvement, test case execution windows;Ability to create modular test case designs that can be fully re-used and integrated with a domain model;Demonstrated ability to write optimized scripts and having knowledge to integrate with other tools";
			String testAutomationDesignintermediate="Demonstrated ability to use Test Automation Framework for writing new test cases and minor upgrades to the framework to support new features;Ability to adopt TDD, BDD, methods and integrate data, manual + automated testing in test case design;Ability to package test automation suites for execution;Ability to apply best practices such as audit trail, data independence, multithreading and reporting;Uses industry standard design standards to bring in overall productivity improvement, test case execution windows;Demonstrated ability to write optimized scripts and having knowledge to integrate with other tools";
			String testAutomationDesignBasic="Familiar with using the Test Automation Framework for writing test cases;Demonstrated ability to independently maintain test cases for minor changes";
			String testAutomationDesignFlag=flagChecker(selectedAnswers,testAutomationDesignAdvanced, testAutomationDesignintermediate,testAutomationDesignBasic, 8, 6, 2);
			userStreamOutputFlagsIndividual.put(topic, testAutomationDesignFlag);
			System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+testAutomationDesignFlag);	
			break;
			
		 case "Test Automation Execution":
			 
			 	String testAutomationExecutionAdvanced="Ability to demonstrate productivity improvements in test execution by reducing execution time windows;Ability to schedule and run hands-free and parallel tests and troubleshoot issues related to the same;Proficiency in creating, modifying and executing parallel test scripts based on changes to run plan with parallel execution;Ability to independently manage test execution for self and others managing data, script maintenance, batch and other functional/automation dependencies";
				String testAutomationExecutionintermediate="Ability to schedule and run hands-free and parallel tests and troubleshoot issues related to the same;Proficiency in modifying and executing test scripts based on changes to run plan;Ability to set up automation execution and ability to collect results as well as evidences and report them effectively";
				String testAutomationExecutionBasic="Ability to launch and execute automation test cases and prepare and feed test data for the same;Proficiency in using the run plan and executing test script supported with evidence from projects;Demonstrated ability to make minor maintenance changes to the automation cases and execute based on the test progress and test results";
				String testAutomationExecutionFlag=flagChecker(selectedAnswers,testAutomationExecutionAdvanced, testAutomationExecutionintermediate,testAutomationExecutionBasic, 4, 3, 3);
				userStreamOutputFlagsIndividual.put(topic, testAutomationExecutionFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+testAutomationExecutionFlag);	
				break;
			
		 case "Domain/Product Knowledge":
			 
			  	String domainKnowledgeAdvanced="Ability to direct test and functional prioritization in scrums and / or test strategy on the basis of complexities and dependencies of each area within the product / domain of expertise;Ability to recast knowledge into forms conducive for model based design - such as domain taxonomies, function/sub function listings etc.";
				String domainKnowledgeintermediate="Is seen as a practitioner in the domain / product area and can work independently with no guidance, leading teams towards optimized test design and coverage independently";
				String domainKnowledgeBasic="Fully trained on a Domain/Product area and can articulate concepts with clarity";
				String domainKnowledgeFlag=flagChecker(selectedAnswers,domainKnowledgeAdvanced, domainKnowledgeintermediate,domainKnowledgeBasic, 2, 1, 1);
				userStreamOutputFlagsIndividual.put(topic, domainKnowledgeFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+domainKnowledgeFlag);	
				break;
			
		 case "Defect Logging and Reporting":
			 
				String defectLoggingAdvanced="Demonstrated ability to perform Defect Triage and run Defect Triage and RCA meetings effectively with Stakeholders;Aware of the blocked test cases (Test Funnel) due to defects;Ability to analyse and report the data extracted from a Defect Tracking tool";
				String defectLoggingintermediate="Aware of the blocked test cases (Test Funnel) due to defects;Demonstrated ability to review defects independently and filter out invalid defects";
				String defectLoggingBasic="Ability to adopt a project tailored defect Tracking tool, maintains hygiene in entering details of defects with clarity and in accordance with defect life cycle and standards of the project.;Aware of the blocked test cases (Test Funnel) due to defects;Produces defect reports and knows status of defects of own work";
				String defectLoggingFlag=flagChecker(selectedAnswers,defectLoggingAdvanced, defectLoggingintermediate,defectLoggingBasic, 3, 2, 3);
				userStreamOutputFlagsIndividual.put(topic, defectLoggingFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+defectLoggingFlag);	
				break;
				
				
		 case "Specialized Testing  [ API, Performance Testing, Mobile Testing ]":
			 
			 	String specializedTestingAdvanced="Ability to perform testing for at least one type or multiple types of specialised testing using a tool or automate and ensure that all defects that can potentially arise in a given problem state can be adequately covered through various techniques;Advises or supports specialised testing in opportunities";
				String specializedTestingintermediate="Ability to perform testing for at least one type or multiple types of specialised testing using a tool or automate and ensure that all defects that can potentially arise in a given problem state can be adequately covered through various techniques";
				String specializedTestingBasic="Knowledge of at least one specialized testing type, and ability to define test types for that testing type;Ability to perform testing for at least one type or multiple types of specialised testing using a tool or automate and ensure that all defects that can potentially arise in a given problem state can be adequately covered through various techniques";
				String specializedTestingFlag=flagChecker(selectedAnswers,specializedTestingAdvanced, specializedTestingintermediate,specializedTestingBasic, 2, 1, 2);
				userStreamOutputFlagsIndividual.put(topic, specializedTestingFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+specializedTestingFlag);	
				break;
				
		 case "Defect Management":
			 
				String defectManagementAdvanced="Establish and publish Defect Metrics supported with evidence from project execution;Perform Root Cause Analysis with successful outcomes;Demonstrated ability to manage Defect Review meetings effectively;Ability to recommend and document best practices in Defect Management;Ability to automate defect metrics collection and plot various defect based process improvements;Ability to tie down high defect areas to project risk and plan for adequate risk coverage through increase of test coverage";
				String defectManagementintermediate="Establish and publish Defect Metrics supported with evidence from project execution;Perform Root Cause Analysis with successful outcomes;Demonstrated ability to manage Defect Review meetings effectively";
				String defectManagementBasic="Has knowledge of Defect Management with no or limited experience of handling Defect Review calls and collating Metrics";
				String defectManagementFlag=flagChecker(selectedAnswers,defectManagementAdvanced, defectManagementintermediate,defectManagementBasic, 6, 3, 1);
				userStreamOutputFlagsIndividual.put(topic, defectManagementFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+defectManagementFlag);	
				break;
				
		 case "Team Management":
			 
				String teamManagementAdvanced="Proactively and reactively identifies problems or issues in team dynamics and rectifies them;Ability to engage in varying types of feedback, choosing the right type at the appropriate time and ensuring the discussion and decision sticks;Define team vision and goals and guide team using quantitative techniques on the progress towards vision / goal;Ability to bring people together to form a motivated team;Ability to help create the right environment for a team to work in;Recognizes and deals with issues and conflicts;Structure the team in an optimal way depending on the situation;Ability to identify issues through health-checks with the team and remedy the same;Ability to accelerate Team Development";
				String teamManagementintermediate="Understands importance of Team Dynamics. Creates a collaborative culture and empowers Delivery Teams;Ability to work on constructive actions from feedback in a manner that positively impact Stakeholders;Define team vision and goals and motivate team to progress towards the same;Ability to bring people together to form a motivated team;Ability to help create the right environment for a team to work in;Recognizes and deals with issues and conflicts;Structure the team in an optimal way depending on the situation";
				String teamManagementBasic="Understands Team dynamics and works harmoniously with any team;Gathers feedback from team and Stakeholders at regular intervals and works on action items;Aware of team vision and motivates team to progress towards the same";
				String teamManagementFlag=flagChecker(selectedAnswers,teamManagementAdvanced, teamManagementintermediate,teamManagementBasic, 9, 7, 3);
				userStreamOutputFlagsIndividual.put(topic, teamManagementFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+teamManagementFlag);	
				break;
			
		 
		 case "Test Management":
			 
				String testManagementAdvanced="Test Planning, Estimation, Monitoring and Control;Ability to perform Test Management for a small project or independently for a large single project or multiple projects;Defines a run plan given a set of tests and a go-live target;Ability to share and implement best practices in Test Management;Ability to coach and set up test dashboards and bring insights to stakeholders at CXO levels";
				String testManagementintermediate="Test Planning, Estimation, Monitoring and Control;Ability to perform Test Management for a small project or independently for a large single project or multiple projects;Defines a run plan given a set of tests and a go-live target";
				String testManagementBasic="";
				String testManagementFlag=flagChecker(selectedAnswers,testManagementAdvanced, testManagementintermediate,testManagementBasic, 5, 3, 0);
				userStreamOutputFlagsIndividual.put(topic, testManagementFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+testManagementFlag);	
				break;

		 case "Project and Delivery Management":
			 
				String projectAndDeliveryManagementAdvanced="Ability to handle Resource Planning and Scheduling;Ability to manage multiple projects;Ability to upfront predict, commit and then define metrics of interest and show committed improvements on metrics and monitoring;Ability to bring in insights and industry best practices through collaborative Stakeholder Governance forums with multi-level Governance meetings";
				String projectAndDeliveryManagementintermediate="Ability to apply Frameworks and Methodologies (e.g. Agile);Ability to handle Resource Planning and Scheduling;Ability to actively address internal and external risks, issues and dependencies including where ownership exists outside the team;Ability to manage multiple projects;Ability to define and set up metrics of interest and show improvements on metrics and monitoring;Ability to define and execute Project Governance with senior internal and external Stakeholders - with regular meetings";
				String projectAndDeliveryManagementBasic="Trained in Project Management concepts;Ability to support a Lead or Manager to perform Delivery Management;Ability to handle Resource Planning and Scheduling;Ability to review and track projects to completion;Ability to actively address internal and external risks, issues and dependencies including where ownership exists outside the team;Ability to measure, report and trend metrics on project over releases/milestones;Ability to provide Project Governance reports effectively and on time";
				String projectAndDeliveryManagementFlag=flagChecker(selectedAnswers,projectAndDeliveryManagementAdvanced, projectAndDeliveryManagementintermediate,projectAndDeliveryManagementBasic, 4, 6, 7);
				userStreamOutputFlagsIndividual.put(topic, projectAndDeliveryManagementFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+projectAndDeliveryManagementFlag);	
				break;
			 
		 case "Test Strategy and Planning":		
			 
			 	String testStrategyAndPlanningAdvanced="Coaches other program (non-testing) teams as the central point of expertise;Ability to lead a continual planning process in a very complex environment";
				String testStrategyAndPlanningintermediate="Recommend multiple strategies based on needs and complexities of the project;Understands the environment and is able to prioritise the most important or highest value tasks;Ability to manage complex internal and external dependencies;Ability to eliminate blockers that affect the plan and develop a plan for difficult situations";
				String testStrategyAndPlanningBasic="Understand Test Strategy and define the Test Strategy independently and plan the testing for a project";
				String testStrategyAndPlanningFlag=flagChecker(selectedAnswers,testStrategyAndPlanningAdvanced, testStrategyAndPlanningintermediate,testStrategyAndPlanningBasic, 2, 4, 1);
				userStreamOutputFlagsIndividual.put(topic, testStrategyAndPlanningFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+testStrategyAndPlanningFlag);	
				break;
				
			
		 case "Test Solutions (Pre Sales)":		
			 
			 	String testSolutionsAdvanced="Ability to individually handle Test Solutions and responses for proposals for a single project or multiple projects;Ability to state assumptions and dependencies clearly;Ensures that assets for proposal building are managed and kept up to date;Ability to conduct effective and compelling proposal walkthroughs leading towards conversion;Provides costing, schedule and optimization solutions for proposals and supports in proposal defence";
				String testSolutionsintermediate="Ability to support development of solution for RFP response;Ability to individually handle Test Solutions and responses for proposals for a single project or multiple projects;Ability to state assumptions and dependencies clearly;Ensures that assets for proposal building are managed and kept up to date;Ability to  sequence test cycles/phases in line with customer schedule, plan effort and schedule along with scope boundaries";
				String testSolutionsBasic="Ability to state assumptions and dependencies clearly;Ensures that assets for proposal building are managed and kept up to date;Ability to provide test scoping through functional breakdown, test cases sizing and test cycles";
				String testSolutionsFlag=flagChecker(selectedAnswers,testSolutionsAdvanced, testSolutionsintermediate,testSolutionsBasic, 5, 5, 3);
				userStreamOutputFlagsIndividual.put(topic, testSolutionsFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+testSolutionsFlag);	
				break;		
				
		 case "Program Management":
			 
			 	String programManagementAdvanced="Ability to drive a change control board to approve and percolate changes through the appropriate processes. Control changes at customer level;Ability to apply  superior analytical skills;Good knowledge of techniques for planning, monitoring and controlling programmes;Good knowledge of budgeting and resource allocation procedures;Ability to continuously focus on Risk Management and include contingency & mitigation planning;Ability to focus on Governance to achieve desired results in the program;Ability to think Big Picture and set the vision;Has sufficient seniority and credibility to advise project teams on their projects in relation to the program;Ability to build effective relationships with Stakeholders;Ability to perform Resource forecasting and fulfilment";
				String programManagementintermediate="Ability to setup uniform processes to monitor and handle change. Ensure no scope creep and monetize changes;Ability to apply  superior analytical skills;Good knowledge of techniques for planning, monitoring and controlling programmes;Good knowledge of budgeting and resource allocation procedures;Ability to continuously focus on Risk Management and include contingency & mitigation planning;Ability to focus on Governance to achieve desired results in the program;Ability to think Big Picture and set the vision";
				String programManagementBasic="Ability to impose a common set of processes to report progress, change and uncertainty;Ability to adjust plans based on performance changes;Ensures Project Managers use the correct Testing life-cycle for the characteristics of the products they have to test;Good knowledge of techniques for planning, monitoring and controlling programmes;Good knowledge of budgeting and resource allocation procedures";
				String programManagementFlag=flagChecker(selectedAnswers,programManagementAdvanced, programManagementintermediate,programManagementBasic, 10, 7, 5);
				userStreamOutputFlagsIndividual.put(topic, programManagementFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+programManagementFlag);	
				break;
				
		 case "OO Programming":
			 
			 	String oOProgrammingAdvanced="Uses code configuration management and tools (git/stash/vss etc.) in the most efficient way possible - No code on personal devices;Ability to implement best practices in programming;Ability to perform Code Optimisation and demonstrate through code metrics;Demonstrated ability to code for complex logic/algorithms";
				String oOProgrammingintermediate="Uses code configuration management and tools (git/stash/vss etc.) in the most efficient way possible - No code on personal devices;Sets up standards and accelerators for development;Demonstrated ability to perform Code Reviews;Ability to implement best practices in programming;Ability to design and write code independently with code metrics and coding practices intact;Ability to build code aligned to OO concepts and layered to support business and data layers";
				String oOProgrammingBasic="Trained or has knowledge in OO Programming and Design;Uses code configuration management and tools (git/stash/vss etc.) in the most efficient way possible - No code on personal devices;Understands Test Code and ability to contribute with help of Low design with coding practices intact;Creates and understands class diagrams and implements the same in code";
				String oOProgrammingFlag=flagChecker(selectedAnswers,oOProgrammingAdvanced, oOProgrammingintermediate,oOProgrammingBasic, 4, 6, 4);
				userStreamOutputFlagsIndividual.put(topic, oOProgrammingFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+oOProgrammingFlag);	
				break;				
			 
		 case "Software Design":
			 
				String softwareDesignAdvanced="Ability to conceptualise and design using design patterns and optimise the design;Ability to create portability software that can be called in an API - with no dependency on OS, Text files, human intervention etc;Ability to create and package re-usability software assets for more than one problem / program and promote such re-use;Coaches team on best practices for software design";
				String softwareDesignintermediate="Ability to create DB designs, Class diagrams and other UML designs to represent flow of information;Ability to create and package re-usability software assets for more than one problem / program and promote such re-use;Coaches team on best practices for software design";
				String softwareDesignBasic="Ability to understand UML concepts, design diagrams and code as per design specifications";
				String softwareDesignFlag=flagChecker(selectedAnswers,softwareDesignAdvanced, softwareDesignintermediate,softwareDesignBasic, 4, 3, 1);
				userStreamOutputFlagsIndividual.put(topic, softwareDesignFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+softwareDesignFlag);	
				break;			
				
		 case "Knowledge of Multiple Tools (Build tools, Test frameworks)":
			 
			 	String knowledgeofMultipleToolsAdvanced="Ability to add Plugins/Add Ons to the tools to overcome limitations;Ability to optimise the use of tools;Ability to conceptualise an integrated platform using the tools";
				String knowledgeofMultipleToolsintermediate="Ability to understand the limitations of the tools";
				String knowledgeofMultipleToolsBasic="Has knowledge of what tools are used for Frameworks, Build and Scripting";
				String knowledgeofMultipleToolsFlag=flagChecker(selectedAnswers,knowledgeofMultipleToolsAdvanced, knowledgeofMultipleToolsintermediate,knowledgeofMultipleToolsBasic, 3, 1, 1);
				userStreamOutputFlagsIndividual.put(topic, knowledgeofMultipleToolsFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+knowledgeofMultipleToolsFlag);
				break;
				
		 case "Solution Development":
			 
			 	String solutionDevelopmentAdvanced="Ability to implement best design/coding standards/practices for Solution Development and ability to coach other team members;Ability to debug all failures independently without any help;Ability to conceptualise solutions to support custom tools or hybrid tools as well as to support Release Management";
				String solutionDevelopmentintermediate="Contributes individually to development of Automation Framework;Ability to debug all failures independently without any help";
				String solutionDevelopmentBasic="Ability to make limited contribution to Framework Development with support";
				String solutionDevelopmentFlag=flagChecker(selectedAnswers,solutionDevelopmentAdvanced, solutionDevelopmentintermediate,solutionDevelopmentBasic, 3, 2, 1);
				userStreamOutputFlagsIndividual.put(topic, solutionDevelopmentFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+solutionDevelopmentFlag);
				break;	
			 
		 case "Test Data Management and Database Skills":
			 
				String testDataManagementAndDatabaseSkillsAdvanced="Ability to integrate with test data messaging and other sources that can be integrated through automation / RPA (e.g. reset a flag or balance on Mainframe system);Expert in SQL with database design skills";
				String testDataManagementAndDatabaseSkillsintermediate="Automation of Test Data Management and planning to provision test data;Expert in SQL with database design skills;Has strong Data Management/Database expertise combined with test data definition and specification techniques and data privacy ability";
				String testDataManagementAndDatabaseSkillsBasic="Knowledge of basic database and SQL skills with no or limited experience on Test Data Management;Expert in SQL with database design skills";
				String testDataManagementAndDatabaseSkillsFlag=flagChecker(selectedAnswers,testDataManagementAndDatabaseSkillsAdvanced, testDataManagementAndDatabaseSkillsintermediate,testDataManagementAndDatabaseSkillsBasic, 2, 3, 2);
				userStreamOutputFlagsIndividual.put(topic, testDataManagementAndDatabaseSkillsFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+testDataManagementAndDatabaseSkillsFlag);
				break;

				
		 case "Levels of Automation":
			 
			 	String levelsofAutomationAdvanced="Demonstrated ability to automate GUI, API and Database layers;Demonstrated ability to automate at multiple layers outside of GUI and enable multi technology integration for the framework";
				String levelsofAutomationintermediate="Demonstrated ability to automate GUI, API and Database layers";
				String levelsofAutomationBasic="";
				String levelsofAutomationFlag=flagChecker(selectedAnswers,levelsofAutomationAdvanced, levelsofAutomationintermediate,levelsofAutomationBasic, 2, 1, 0);
				userStreamOutputFlagsIndividual.put(topic, levelsofAutomationFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+levelsofAutomationFlag);
				break;
				
		 case "Reporting Skills":
			 
			 	String reportingSkillsAdvanced="Ability to coach team on best practices on new and efficient ways for building reports - such as AI based reporting, Graphana, Kibana, MATLAB etc;Ability to create highly intuitive visual and data reports that do not require human interpretation";
				String reportingSkillsintermediate="Demonstrated ability to generate reports using HTML, Extent or any fit for purpose tools;Ability to create highly intuitive visual and data reports that do not require human interpretation";
				String reportingSkillsBasic="Trained in HTML reporting and SQL based data querying";
				String reportingSkillsFlag=flagChecker(selectedAnswers,reportingSkillsAdvanced, reportingSkillsintermediate,reportingSkillsBasic, 2, 2, 1);
				userStreamOutputFlagsIndividual.put(topic, reportingSkillsFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+reportingSkillsFlag);
				break;
				
		 case "Service Engineering":
			 
			 	String serviceEngineeringAdvanced="Ability to apply Model based, coverage led and automated test case design for services and hands-free execution with fully sourced synthetic and provisioned test data;Ability to contribute to service level tests - through automated test design from specifications;Ability to integrate hands free Test Automation in CI/CD pipeline;Builds automation framework from ground up, integrating with CI tools and Test Case Management tools";
				String serviceEngineeringintermediate="Knowledge of service/micro-service/API and Application Architecture, Test infrastructures, configurations and environments;Ability to contribute to service level tests - through automated test design from specifications;Ability to integrate hands free Test Automation in CI/CD pipeline";
				String serviceEngineeringBasic="Knowledge of  SWAGGER/ WSDL, XML concepts and file passing (JSON/XML );Knowledge of Service Automation concepts";
				String serviceEngineeringFlag=flagChecker(selectedAnswers,serviceEngineeringAdvanced, serviceEngineeringintermediate,serviceEngineeringBasic, 4, 3, 2);
				userStreamOutputFlagsIndividual.put(topic, serviceEngineeringFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+serviceEngineeringFlag);
				break;
			 
			 
		 case "Performance Engineering":
			 
			 	String performanceEngineeringAdvanced="Expert in performance engineering;Ability to gain and contribute knowledge on new performance engineering skills using new tools and technologies";
				String performanceEngineeringintermediate="Ability to analyse performance test result to identify bottlenecks (use advanced SQL skills);Ability to identify transactions and workflows and calculate workload TPS goals and rates;Ability to use and customize monitoring tools helps in identifying the server side bottlenecks in performance testing";
				String performanceEngineeringBasic="Knowledge of Performance test and Engineering and ability to apply Scripting skills to build load tests";
				String performanceEngineeringFlag=flagChecker(selectedAnswers,performanceEngineeringAdvanced, performanceEngineeringintermediate,performanceEngineeringBasic, 2, 3, 1);
				userStreamOutputFlagsIndividual.put(topic, performanceEngineeringFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+performanceEngineeringFlag);
				break;
				
		 case "Data Science and Testing Predictions":
			 
			 	String dataScienceandTestingPredictionsAdvanced="Ability to create or tweak predictive analytics models (test and improve them using the lifecycle data to arrive at testing predictions);Ability to create visuals to derive interesting insights and formulate various hypothesis based data testing;Coaches team to sustain and scale this capability";
				String dataScienceandTestingPredictionsintermediate="Ability to leverage Data Analytics, Machine Learning and build an adaptive framework dynamically to optimizes these assets based on lifecycle data such as: build failure trends, defect detection and escape patterns, root causes of defects;Ability to create various engineering dashboards from data that is sourced real time or in batch mode";
				String dataScienceandTestingPredictionsBasic="Trained in data/predictive analysis with limited or no practical experience;Ability to pull out data for various measures in a hands-free and repeatability manner and present visuals";
				String dataScienceandTestingPredictionsFlag=flagChecker(selectedAnswers,dataScienceandTestingPredictionsAdvanced, dataScienceandTestingPredictionsintermediate,dataScienceandTestingPredictionsBasic, 3, 2, 2);
				userStreamOutputFlagsIndividual.put(topic, dataScienceandTestingPredictionsFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+dataScienceandTestingPredictionsFlag);
				break;
			 
		 case "Business Process Knowledge (Client specific/Product Specific)":
			 
			 	String businessProcessKnowledgeAdvanced="Provides expertise for most of the operations of an entity (e.g. Bank, Insurance) integrated with data needs and story proofing/user story analysis etc";
				String businessProcessKnowledgeintermediate="Knowledge of complete operations of a particular division (e.g. Cards, Wealth Management, Corporate Banking, Retail Banking) and can apply the knowledge for testing";
				String businessProcessKnowledgeBasic="Knowledge of workflows limited to one function in the domain (e.g. Retail/Cards)";
				String businessProcessKnowledgeFlag=flagChecker(selectedAnswers,businessProcessKnowledgeAdvanced, businessProcessKnowledgeintermediate,businessProcessKnowledgeBasic, 1, 1, 1);
				userStreamOutputFlagsIndividual.put(topic, businessProcessKnowledgeFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+businessProcessKnowledgeFlag);
				break;
				
		 case "Conceptual View of Domain":
			 
			 	String conceptualViewofDomainAdvanced="Ability to provide a functional/ domain taxonomy that will enable automation teams to build out automation units from business concepts and flows;Ability to segregate scenarios and isolate data needs, PIIs and key actors in a Domain;Ability to provide consulting on data model needs for the domain to tie in to Test data planning and provisioning for test cases";
				String conceptualViewofDomainintermediate="Ability to represent the domain as interacting sequence of activities and actors, such as a swim lane, conceptual map, function matrix etc.;Ability to segregate scenarios and isolate data needs, PIIs and key actors in a Domain;Ability to guide prioritization of testing within a domain";
				String conceptualViewofDomainBasic="Understands the domain as interacting sequence of activities and actors, such as a swim lane, conceptual map, function matrix etc;Ability to guide prioritization of testing within a domain";
				String conceptualViewofDomainFlag=flagChecker(selectedAnswers,conceptualViewofDomainAdvanced, conceptualViewofDomainintermediate,conceptualViewofDomainBasic, 3, 3, 2);
				userStreamOutputFlagsIndividual.put(topic, conceptualViewofDomainFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+conceptualViewofDomainFlag);
				break;
			 
		 case "Requirement Analysis and Influencing SCRUM":
			 
			 	String requirementAnalysisandInfluencingSCRUMAdvanced="Ability to trace down from requirements to implementation cycles;Ability to establish minimum acceptance criteria for requirements and development cycles and orchestrate test & development teams towards consistent velocity of team;Expert in Requirements Engineering and Requirements Impact assessment leading to Change management";
				String requirementAnalysisandInfluencingSCRUMintermediate="Ability to establish minimum acceptance criteria for requirements and development cycles and orchestrate test & development teams towards consistent velocity of team;Demonstrated ability to influence Scrum team in the areas of test estimation, test prioritization and sequencing";
				String requirementAnalysisandInfluencingSCRUMBasic="Trained in Requirements Analysis and Agile/Scrum Concepts;Ability to analyse requirements for a single project and translate to the Project Team";
				String requirementAnalysisandInfluencingSCRUMFlag=flagChecker(selectedAnswers,requirementAnalysisandInfluencingSCRUMAdvanced, requirementAnalysisandInfluencingSCRUMintermediate,requirementAnalysisandInfluencingSCRUMBasic, 3, 2, 2);
				userStreamOutputFlagsIndividual.put(topic, requirementAnalysisandInfluencingSCRUMFlag);
				System.out.println("Topic - "+topic+"	Selected Ans - "+selectedAnswers+"Category - "+requirementAnalysisandInfluencingSCRUMFlag);
				break;
				
		 case "Model Based Test Design":
			 
			 	String modelBasedTestDesignAdvanced="Ability to create models for different levels of requirements (business process level, feature or story level) linked to each other;Ability to describe models at different levels of abstraction with high level flows;Practitioner for Test basis and Consultant for various automated test design models such as API, services etc;Expert in designing test cases through test basis model and re-use strategies;Ability to analyse, validate and manage requirements for a single project and provide assistance to the Project Team";
				String modelBasedTestDesignintermediate="Ability to analyse and specify requirements in a structured manner and model the behavioural flow using the model based technique or tool;Ability to apply and drive Model Based test design;Ability to prepare Test Basis, Transaction Matrix and Scenario Matrix with help";
				String modelBasedTestDesignBasic="Knowledge of model based testing and development of requirements in the form of models (e.g. Behavioural model, Test Basis etc.);Knowledge on Test Basis Methodology and design test cases from the Scenario Matrix and Transaction Matrix";
				String modelBasedTestDesignFlag=flagChecker(selectedAnswers,modelBasedTestDesignAdvanced, modelBasedTestDesignintermediate,modelBasedTestDesignBasic, 5, 3, 2);
				userStreamOutputFlagsIndividual.put(topic, modelBasedTestDesignFlag);
				System.out.println("Topic - "+topic+"Selected Ans - "+selectedAnswers+"Category - "+modelBasedTestDesignFlag);
				break;
			 
		}
	}
	
	
	public void writeValuesInExcel(Map<String,Map<String,String>> result,String sheetNameDetails,String exceltype) throws Exception
	{
		XSSFWorkbook output;
		FileInputStream input;
		if(exceltype.equalsIgnoreCase("new"))
		{
			output=new XSSFWorkbook();
		}
		else
		{
			input=new FileInputStream(new File("C:\\Users\\1601017\\Desktop\\Stream Change\\output.xlsx"));
			output=new XSSFWorkbook(input);
		}
		XSSFSheet sheetName=output.createSheet(sheetNameDetails);
		Set<String> rowValues=userStreamOutputFlagsIndividual.keySet();
		XSSFRow row0=sheetName.createRow(0);
		XSSFRow row1;
		int detailsCellNumber=0;
		int headercellNumber=0;
		XSSFCellStyle style=output.createCellStyle();
		XSSFFont font = output.createFont();
		font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);
		style.setFont(font);
		
		for(String headerVal:rowValues)
		{
			XSSFCell cell=row0.createCell(headercellNumber);
			cell.setCellValue(headerVal);
			cell.setCellStyle(style);
			headercellNumber++;
		}
		int index=1;
   for (Entry<String, Map<String,String>> enterset : result.entrySet()) {	

	   Map<String,String> tempExeMap=new LinkedHashMap<String,String>();
	   tempExeMap=enterset.getValue();
	   row1=sheetName.createRow(index);
	   for(Entry<String, String> individual:tempExeMap.entrySet())
	   {
		  
			  row1.createCell(detailsCellNumber++).setCellValue(individual.getValue());  
		  
		      
	   }
	   detailsCellNumber=0;
	   index++;	
}	
	

FileOutputStream outputStream=new FileOutputStream(new File("C:\\Users\\1601017\\Desktop\\Stream Change\\output.xlsx"));
output.write(outputStream);
outputStream.close();
	}
	
	
	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub

		ReadDataFromExcel excel=new ReadDataFromExcel();
		excel.updateExcelValuesInMap(excel.userStramValues);
		
		for (Entry<String, Map<String,String>> mapValues : excel.userStramValues.entrySet()) 
		{
			String name=mapValues.getValue().get("Name")+mapValues.getValue().get("Employee ID");
			excel.verifyFlags(mapValues.getValue());
			excel.userStreamOutputValuesAll.put(name, excel.userStreamOutputFlagsIndividual);
			excel.userStreamSelectedAll.put(name, excel.userStreamSelectedIndividual);
								
		}
		excel.writeValuesInExcel(excel.userStreamOutputValuesAll, "StreamChange", "new");
		excel.writeValuesInExcel(excel.userStreamSelectedAll, "SelectedValues", "existing");
	}
	
	
	
}
